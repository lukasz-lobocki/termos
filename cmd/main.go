package cmd

import (
	"log"
	"os"

	"github.com/fatih/color"
	"github.com/spf13/cobra"
)

var (
	semVer      string
	commitHash  string
	isGitDirty  string
	isSnapshot  string
	goOs        string
	goArch      string
	gitUrl      string
	builtBranch string
	builtDate   string
)

var semReleaseVersion string = semVer +
	func(pre string, txt string) string {
		if len(txt) > 0 {
			return pre + txt
		} else {
			return ""
		}
	}("+", goArch) +
	func(pre string, txt string) string {
		if len(txt) > 0 {
			return pre + txt
		} else {
			return ""
		}
	}(".", builtBranch) +
	func(pre string, txt string) string {
		if len(txt) > 0 {
			return pre + txt
		} else {
			return ""
		}
	}(".", commitHash)

var rootCmd = &cobra.Command{
	Use:               "termos",
	Short:             "Screenshots a terminal output.",
	Long:              `Creates screenshots based on terminal command output.`,
	Version:           semReleaseVersion,
	DisableAutoGenTag: true, // Do not add footer to autogenerated help.

	CompletionOptions: cobra.CompletionOptions{HiddenDefaultCmd: true},

	// Uncomment the following line if your bare application
	// has an action associated with it:
	// Run: func(cmd *cobra.Command, args []string) {},
}

var (
	loggingLevel int         // Global logging level, see MAX_LOGGING_LEVEL.
	logInfo      *log.Logger // Blue logger, for info.
	logWarning   *log.Logger // Yellow logger, for warning.
	logError     *log.Logger // Red logger, for error.
)

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}
}

func init() {
	initLoggers()

	// Hide help command.
	rootCmd.SetHelpCommand(&cobra.Command{Hidden: true})

	//Do not sort flags.
	rootCmd.Flags().SortFlags = false
}

func initLoggers() {
	hiCyan := color.New(color.FgHiCyan).SprintFunc()
	hiYellow := color.New(color.FgHiYellow).SprintFunc()
	hiRed := color.New(color.FgHiRed).SprintFunc()

	logInfo = log.New(os.Stderr, hiCyan("╭info\n╰"), 0)
	logWarning = log.New(os.Stderr, hiYellow("╭warning\n╰"), 0)
	logError = log.New(os.Stderr, hiRed("╭error\n╰"), 0)
}
